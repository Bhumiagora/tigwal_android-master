// Generated by view binder compiler. Do not edit!
package com.tigwal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.Switch;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.viewbinding.ViewBinding;
import com.tigwal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutToolbarBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final AppCompatImageView ivBack;

  @NonNull
  public final AppCompatImageView ivEdit;

  @NonNull
  public final AppCompatImageView ivFilter;

  @NonNull
  public final Switch switchNotification;

  @NonNull
  public final AppCompatTextView txtHeaderTitle;

  private LayoutToolbarBinding(@NonNull LinearLayout rootView, @NonNull AppCompatImageView ivBack,
      @NonNull AppCompatImageView ivEdit, @NonNull AppCompatImageView ivFilter,
      @NonNull Switch switchNotification, @NonNull AppCompatTextView txtHeaderTitle) {
    this.rootView = rootView;
    this.ivBack = ivBack;
    this.ivEdit = ivEdit;
    this.ivFilter = ivFilter;
    this.switchNotification = switchNotification;
    this.txtHeaderTitle = txtHeaderTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutToolbarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutToolbarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_toolbar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutToolbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.iv_back;
      AppCompatImageView ivBack = rootView.findViewById(id);
      if (ivBack == null) {
        break missingId;
      }

      id = R.id.iv_edit;
      AppCompatImageView ivEdit = rootView.findViewById(id);
      if (ivEdit == null) {
        break missingId;
      }

      id = R.id.ivFilter;
      AppCompatImageView ivFilter = rootView.findViewById(id);
      if (ivFilter == null) {
        break missingId;
      }

      id = R.id.switchNotification;
      Switch switchNotification = rootView.findViewById(id);
      if (switchNotification == null) {
        break missingId;
      }

      id = R.id.txtHeaderTitle;
      AppCompatTextView txtHeaderTitle = rootView.findViewById(id);
      if (txtHeaderTitle == null) {
        break missingId;
      }

      return new LayoutToolbarBinding((LinearLayout) rootView, ivBack, ivEdit, ivFilter,
          switchNotification, txtHeaderTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
